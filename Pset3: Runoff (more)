// a more involved election scenario: a candidate must have at least 50% of the votes cast in order to win. 
// If no candidate has >50%, the candidate with the least votes is eliminated and the remaining candidates enter a Runoff situation. 

#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max voters and candidates
#define MAX_VOTERS 100
#define MAX_CANDIDATES 9

// ARRAY OF INTS
// preferences[i][j] is jth preference for voter i
int preferences[MAX_VOTERS][MAX_CANDIDATES];

// Candidates have name, vote count, eliminated status
typedef struct
{
    string name;
    int votes;
    bool eliminated;
}
candidate;

// Array of candidates
candidate candidates[MAX_CANDIDATES];

// Numbers of voters and candidates
int voter_count;
int candidate_count;

// Function prototypes
bool vote(int voter, int rank, string name);
void tabulate(void);
bool print_winner(void);
int find_min(void);
bool is_tie(int min);
void eliminate(int min);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: runoff [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX_CANDIDATES)
    {
        printf("Maximum number of candidates is %i\n", MAX_CANDIDATES);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1];
        candidates[i].votes = 0;
        candidates[i].eliminated = false;
    }

    voter_count = get_int("Number of voters: ");
    if (voter_count > MAX_VOTERS)
    {
        printf("Maximum number of voters is %i\n", MAX_VOTERS);
        return 3;
    }

    // Keep querying for votes
    for (int i = 0; i < voter_count; i++)           // for each voter
    {

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)   // get each rank
        {
            string name = get_string("Rank %i: ", j + 1);

            // Record vote, unless it's invalid
            if (!vote(i, j, name))
            {
                printf("Invalid vote.\n");
                return 4;
            }
        }
        printf("\n");
    }

    // Keep holding runoffs until winner exists
    while (true)
    {
        // Calculate votes given remaining candidates
        tabulate();

        // Check if election has been won
        bool won = print_winner();
        if (won)
        {
            break;
        }

        // Eliminate last-place candidates
        int min = find_min();
        bool tie = is_tie(min);

        // If ALL tie, everyone wins
        if (tie)
        {
            for (int i = 0; i < candidate_count; i++)
            {
                if (!candidates[i].eliminated)
                {
                    printf("%s\n", candidates[i].name);
                }
            }
            break;
        }

        // Eliminate anyone with minimum number of votes
        eliminate(min);

        // Reset vote counts back to zero
        for (int i = 0; i < candidate_count; i++)
        {
            candidates[i].votes = 0;
        }
    }

    // end
    return 0;
}



// VOTE Record preference if vote is valid
bool vote(int voter, int rank, string name)     // i (voter), j (rank), name
{
    for (int c = 0; c < candidate_count; c++) // c for candidate
    {
        if (strcmp(name, candidates[c].name) == 0)
        {
            preferences[voter][rank] = c;
            return true;
        }
    }
    return false;
}




// TABULATE votes for non-eliminated candidates
void tabulate(void)
{
    // Set all vote counts to 0
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].votes = 0;
    }

    for (int i = 0; i < voter_count; i++)   // for each voter
    {
        int j = 0;                                       // j was [rank] choice
        int choice = preferences[i][j];                  // choice = who they chose at j (prefereces index no.)
        while (candidates[choice].eliminated == true)    // if j choice eliminated, go to next
        {
            j++;
            choice = preferences[i][j];
        }

        candidates[choice].votes ++;        // add one vote to candidate of choice
    }
    return;
}




// PRINT the winner of the election, if there is one
bool print_winner(void)
{
    // If any candidate has more than half the vote, they win
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].votes > (voter_count / 2))
        {
            printf("%s\n", candidates[i].name);
            return true;
        }
    }
    // If nobody has won,
    return false;
}



// MIN Return the minimum number of votes any remaining candidate has
int find_min(void)
{
    // declare to compare
    int m = voter_count;

    for (int i = 0; i < candidate_count; i++)   // look at the next cand.
    {
        // if next cand. has fewer votes
        if (m > candidates[i].votes && candidates[i].eliminated == false)
        {
            // declare new minimum
            m = candidates[i].votes;
        }
    }
    return m;
}



// TIE Return true if the election is tied between all candidates, false otherwise
bool is_tie(int min)
{
    int tied = 0;
    int remaining = 0;

    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].eliminated == false)
        {
            remaining++;
        }
    }

    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].votes == min)
        {
            tied++;
        }
    }

    if (tied == remaining)
    {
        return true;
    }
    return false;
}



// ELIMINATE the candidate (or candidates) in last place
void eliminate(int min)
{
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].votes == min)
        {
            candidates[i].eliminated = true;
        }
    }
    return;
}
